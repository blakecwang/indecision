to see final indecision app
http://indecision.mead.io

to get final source code
http://links.mead.io/indecision

to generate node_modules
yarn install

to continuously compile JSX to JS (drop --watch for one-time operation)
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

to run the server (from public/ folder)
live-server public

       can reassign?   can redefine?
var:   yes             yes
let:   yes             no
const: no              no
- default to using const
- if you need to reassign, switch to let
- NEVER use var

var, let, const => function-scoped
let, const => block-scoped

regular functions can have names
arrow functions are always anonymous

can't access 'arguments' keyword inside arrow functions

when we use a function as the value of object property, then the 'this' keyword
references that object:
const myObj = {
  someProperty: function () {
    this // This 'this' refers to myObj
  }
}

invocations of 'this' inside an arrow function (which are all anonymous) use
the same 'this' as the context in which the function was defined

in JSX, HTML 'class' is now 'className', e.g. <button className="sweetness">
some other things have changed names, see here https://reactjs.org/docs/dom-elements.html

Synthetic events reference:
https://reactjs.org/docs/events.html
- scroll down to Supported Events

in JSX (and prolly in JS), empty strings are falsey

classes are named with UpperCase

React component lifecycle methods
  componentDidMount()
  componentDidUpdate(prevProps, prevState)
  componentWillUnmount()
  there are more, just google for 'em

localStorage
  > localStorage.setItem('name', 'Blake');
  < undefined
  > localStorage.getItem('name');
  < "Blake"
  > localStorage.removeItem('name');
  < undefined
  > localStorage.getItem('name');
  < null
- only works with string data
- numbers get implicitly converted to strings

JSON.stringify (object -> string)
JSON.parse (string -> object)
